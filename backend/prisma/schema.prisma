generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model stuffs {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float?
  image       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model users {
  username       String          @id
  name           String
  email          String          @unique
  password       String
  dob            DateTime
  gender         String
  phone          String          @unique
  email_verified Boolean         @default(false)
  phone_verified Boolean         @default(false)
  mute_end_date  DateTime        @default("1970-01-01T00:00:00.000Z")
  profile_pic    String?
  // verified            Boolean         @default(false) // do we need this?
  created_at     DateTime        @default(now())
  posted_ads     ads[]           @relation("OP")
  notifications  notifications[]
  transactions   transactions[]
  threads_op     threads[]       @relation("THREAD_OP")
  threads_client threads[]       @relation("THREAD_CLIENT")
  chats_sender   chats[]         @relation("CHAT_SENDER")
  chats_receiver chats[]         @relation("CHAT_RECEIVER")
}

model temp_emailtoken {
  username String @id
  token    String
}

model ads {
  id              Int        @id @default(autoincrement())
  op              users      @relation("OP", fields: [op_username], references: [username])
  op_username     String
  category        category   @relation("AD_CAT", fields: [category_name], references: [name])
  category_name   String
  title           String
  description     String?
  price           Float?
  is_negotiable   Boolean    @default(false)
  is_used         Boolean    @default(true)
  is_sell_ad      Boolean    @default(true)
  days_used       Int?
  image1          String?
  image2          String?
  image3          String?
  image4          String?
  image5          String?
  receipt_image   String?
  is_phone_public Boolean    @default(false)
  address         String
  latitude        Float?
  longitude       Float?
  promotion       promotions @relation(fields: [promotion_type], references: [promotion_type])
  promotion_type  String
  ai_verdict      Json?
  status          String     @default("pending")
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  threads         threads[]  @relation("ADS_THREAD")
}

model archived_ads {
  id          Int      @id @default(autoincrement())
  op_username String
  title       String
  description String?
  price       Float?
  image1      String?
  reason      String?
  address     String
  created_at  DateTime @default(now())
}

model category {
  name String @id
  ads  ads[]  @relation("AD_CAT")
}

model promotions {
  promotion_type String @id
  description    String
  cost           Float
  validity_days  Int
  ticket         Int
  ads            ads[]
}

model admins {
  username String @id
  name     String
  email    String @unique
  password String
}

model notifications {
  id          Int      @id @default(autoincrement())
  user        users    @relation(fields: [username], references: [username])
  username    String
  type        String   @default("general")
  title       String
  description String?
  created_at  DateTime @default(now())
}

model transactions {
  trx_id                Int       @id @default(autoincrement())
  stripe_checkout_id    String    @unique
  stripe_payment_intent String?    
  user                  users     @relation(fields: [username], references: [username])
  username              String
  ad_id                 Int
  promotion             String
  amount                Float
  method                String?
  status                String    @default("pending")
  receipt_url           String?
  created_at            DateTime  @default(now())
  payment_successful_at DateTime?
}

model threads {
  id              String   @id
  op              users    @relation("THREAD_OP", fields: [op_username], references: [username])
  op_username     String
  client          users    @relation("THREAD_CLIENT", fields: [client_username], references: [username])
  client_username String
  ad              ads      @relation("ADS_THREAD", fields: [ad_id], references: [id])
  ad_id           Int
  chats           chats[]  @relation("THREADS_CHATS")
  updated_at      DateTime @default(now())
}

model chats {
  id                  Int      @id @default(autoincrement())
  thread              threads  @relation("THREADS_CHATS", fields: [thread_id], references: [id])
  thread_id           String
  sender              users    @relation("CHAT_SENDER", fields: [sender_username], references: [username])
  sender_username     String
  receiver            users    @relation("CHAT_RECEIVER", fields: [receiver_username], references: [username])
  receiver_username   String
  message             String
  is_image            Boolean  @default(false)
  is_read_by_receiver Boolean  @default(false)
  created_at          DateTime @default(now())
}
